package edu.kvcc.cis298.cis298inclass1;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Random;

public class QuizActivity extends AppCompatActivity {

    private static final String TAG = "QuizActivity";
    private static final String KEY_INDEX = "index";
    private Button mTrueButton;
    private Button mFalseButton;
    private Button mNextButton;
    private Button mRandomButton;

    private TextView mQuestionTextView;

    private Question[] mQuestionBank = new Question[]{
            //R.string.name is an int, variable id
            new Question(R.string.question_oceans, true),
            new Question(R.string.question_mideast, false),
            new Question(R.string.question_africa, false),
            new Question(R.string.question_americas, true),
            new Question(R.string.question_asias, true),
    };

    Random random = new Random();

    private int mCurrentIndex = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_quiz);

        //Log that the onCreate method was called
        logMethod("onCreate(Bundle) called");

        mQuestionTextView = (TextView) findViewById(R.id.question_text_view);

        if(savedInstanceState != null){
            mCurrentIndex = savedInstanceState.getInt(KEY_INDEX);
        }

        updateQuestion();

        //findViewById returns a layout resource from the layout file.
        //We send in an integer that represents what resource we would
        //like to get. The method returns a View object, and we then
        //need to down cast it to a Button before we assign it
        mTrueButton = (Button) findViewById(R.id.true_button);

        //This will set the onClickListener for the true button.
        //It uses an anonymous inner class to assign the listener.
        //We essentially create the listener class inside the
        //setOnClickListener method, and overrie the OnClick method
        //all at the same time.
        mTrueButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                checkAnswer(true);
            }
        });

        mFalseButton = (Button) findViewById(R.id.false_button);
        mFalseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                checkAnswer(false);
            }
        });

        mNextButton = (Button) findViewById(R.id.next_button);
        mNextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Increment the index, and mod it by the length of the array.
                mCurrentIndex = (mCurrentIndex + 1) % mQuestionBank.length;
                updateQuestion();
            }
        });

        mRandomButton = (Button) findViewById(R.id.random_button);
        mRandomButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v){
                mCurrentIndex = random.nextInt(5);
                updateQuestion();
            }
        });

    }

    @Override
    protected void onStart() {
        super.onStart();
        //Log that the onStart method was called
        logMethod("onStart(Bundle) called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        //Log that the onResume method was called
        logMethod("onResume(Bundle) called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        //Log that the onPause method was called
        logMethod("onPause(Bundle) called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        //Log that the onStop method was called
        logMethod("onStop(Bundle) called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Log that the onDestroy method was called
        logMethod("onDestroy(Bundle) called");
    }

    private void logMethod(String message){
        Log.d(TAG, message);
    }
    private void updateQuestion(){
        int question = mQuestionBank[mCurrentIndex].getTextResId();
        mQuestionTextView.setText(question);
    }

    //Check whether the anser is correct or not, and then toast out
    //an associated message.
    private void checkAnswer(boolean userPressedTrue){
        //Bool to represent the answer to thequestion we are on.
        boolean answerIsTrue = mQuestionBank[mCurrentIndex].isAnswerTrue();

        //Integer to hold the resource id of the correct/incorrect message
        //to display in toast message
        int messageResId = 0;

        //Compare the users answer to the correct answer. When they
        //are the same display the correct toast, otherwise display
        //the incorrect toast.
        if(userPressedTrue == answerIsTrue){
            messageResId = R.string.correct_toast;
        }
        else{
            messageResId = R.string.incorrect_toast;
        }
        Toast.makeText(this, messageResId, Toast.LENGTH_SHORT).show();
    }

    //This method is called right before onPause is called.
    //This is where you should use the passed in Bundle to save
    //the state of the activity. The Bundle has methods on it
    //to put values in a key => value type of way.
    //We are using putInt to storethe mCurrentIndex in the bundle
    //under a key of KEY_INDEX. KEY_Index is really a const declared
    //at the top of this class.
    @Override
    protected void onSaveInstanceState(Bundle savedInstanceState){
        super.onSaveInstanceState(savedInstanceState);
        logMethod("onSavedInstanceState(Bundle) called");
        savedInstanceState.putInt(KEY_INDEX, mCurrentIndex);
    }

    /*
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
    */
}
